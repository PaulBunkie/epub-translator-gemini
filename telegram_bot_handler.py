#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
"""

import os
import requests
import json
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from telegram_notifier import telegram_notifier
import workflow_db_manager

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
BASE_URL = os.getenv("SITE_URL", "https://itube.lol")

class TelegramBotHandler:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
    """
    
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")
        self.api_url = "https://api.telegram.org/bot"
        self.last_update_id = 0
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.allowed_chat_ids = set()
        if self.chat_id:
            self.allowed_chat_ids.add(str(self.chat_id))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        additional_users = os.getenv("TELEGRAM_ADDITIONAL_USERS", "")
        if additional_users:
            for user_id in additional_users.split(","):
                user_id = user_id.strip()
                if user_id:
                    self.allowed_chat_ids.add(user_id)
        
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_updates(self, timeout: int = 30) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API"""
        try:
            url = f"{self.api_url}{self.bot_token}/getUpdates"
            params = {
                "offset": self.last_update_id + 1,
                "timeout": timeout
            }
            
            response = requests.get(url, params=params, timeout=timeout + 5)
            
            if response.status_code == 200:
                data = response.json()
                if data.get("ok"):
                    updates = data.get("result", [])
                    if updates:
                        self.last_update_id = updates[-1]["update_id"]
                    return updates
            return []
            
        except Exception as e:
            print(f"[TelegramBot] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    def send_message(self, chat_id: str, text: str, parse_mode: str = "HTML", reply_markup: dict = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        try:
            url = f"{self.api_url}{self.bot_token}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            
            if reply_markup:
                payload["reply_markup"] = reply_markup
            
            response = requests.post(url, json=payload, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            print(f"[TelegramBot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def handle_command(self, chat_id: str, command: str, args: str = "") -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
        
        if command == "/start":
            return self.cmd_start_with_token(chat_id, args)
        
        elif command == "/help":
            return self.cmd_help()
        
        elif command == "/status":
            return self.cmd_status()
        
        elif command == "/test_yandex":
            return self.cmd_test_yandex()
        
        elif command == "/system_info":
            return self.cmd_system_info()
        
        elif command == "/logs":
            return self.cmd_logs(args)
        
        elif command == "/restart":
            return self.cmd_restart()
        
        elif command == "/unsubscribe":
            return self.cmd_unsubscribe(chat_id)
        
        elif command == "/progress":
            return self.cmd_progress(chat_id, args)
        
        else:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    
    def cmd_start(self) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
        return """
ü§ñ <b>AI Tube Notification Bot</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ.

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/test_yandex - –¢–µ—Å—Ç Yandex API
/system_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã

üìö <b>–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π EPUB –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞:</b>
/start [—Ç–æ–∫–µ–Ω] - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üí° <b>–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ —Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:
<code>/start [–≤–∞—à_—Ç–æ–∫–µ–Ω]</code>

–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/start LutIqOTUHttP35cjjQo1F1PY3Bh1qFpIUC5HRIWUd9M</code>
        """.strip()
    
    def cmd_start_with_token(self, chat_id: str, token: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not token:
            return self.cmd_start()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            book_info = workflow_db_manager.get_book_by_access_token(token)
            
            if not book_info:
                return "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É."
            
            book_id = book_info['book_id']
            filename = book_info['filename']
            target_language = book_info['target_language']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = workflow_db_manager.add_telegram_user(chat_id, token)
            
            if not success:
                return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            reply_markup = {
                "inline_keyboard": [[
                    {
                        "text": "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
                        "callback_data": f"progress_{book_id}"
                    }
                ]]
            }
            
            message_text = f"""
‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>

üìö <b>–ö–Ω–∏–≥–∞:</b> {filename}
üåç <b>–Ø–∑—ã–∫:</b> {target_language}

üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.

üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            self.send_message(chat_id, message_text, reply_markup=reply_markup)
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            
        except Exception as e:
            print(f"[TelegramBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def cmd_unsubscribe(self, chat_id: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = workflow_db_manager.remove_telegram_user(chat_id)
            
            if success:
                return "‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö."
            else:
                return "‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
                
        except Exception as e:
            print(f"[TelegramBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def cmd_progress(self, chat_id: str, book_id: str) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /progress –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        print(f"[TelegramBot] cmd_progress –≤—ã–∑–≤–∞–Ω–∞: chat_id={chat_id}, book_id={book_id}")
        
        if not book_id:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–Ω–∏–≥–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /progress [book_id]"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_subscriptions = workflow_db_manager.get_telegram_user_subscriptions(chat_id)
            
            if not user_subscriptions:
                return "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start [—Ç–æ–∫–µ–Ω] –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –∫–Ω–∏–≥—É
            book_info = workflow_db_manager.get_book_workflow(book_id)
            if not book_info:
                return "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–π."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –∫–Ω–∏–≥—É
            user_has_access = False
            for subscription in user_subscriptions:
                if subscription.get('book_id') == book_id:
                    user_has_access = True
                    break
            
            if not user_has_access:
                return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–Ω–∏–≥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start [—Ç–æ–∫–µ–Ω] –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            print(f"[TelegramBot] –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏ {book_id} –∏–∑ –ë–î")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ workflow_db_manager
            data = workflow_db_manager.get_workflow_book_status(book_id)
            if not data:
                return "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–æ–π –∂–µ —Ñ–æ—Ä–º—É–ª–µ, —á—Ç–æ –∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            stages = data.get('book_stage_statuses', {})
            total_sections = data.get('total_sections_count', 0)
            sections_summary = data.get('sections_status_summary', {})
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —ç—Ç–∞–ø–æ–≤
            stages_ordered = workflow_db_manager.get_all_stages_ordered_workflow()
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            score = 0
            max_score = 5 + 3 + total_sections + 1  # —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è + –∞–Ω–∞–ª–∏–∑ + –ø–µ—Ä–µ–≤–æ–¥ + epub
            
            # –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–µ–∫—Ü–∏—è–º)
            summarized_sections = 0
            if sections_summary.get('summarize'):
                summary = sections_summary['summarize']
                summarized_sections = (summary.get('completed', 0) + 
                                     summary.get('completed_empty', 0) + 
                                     summary.get('skipped', 0))
            if total_sections > 0:
                score += (5 / total_sections) * summarized_sections
            
            # –ê–Ω–∞–ª–∏–∑
            analyze_status = stages.get('analyze', {}).get('status')
            if analyze_status in ["completed", "completed_empty", "skipped"]:
                score += 3
            
            # –ü–µ—Ä–µ–≤–æ–¥
            translated_sections = 0
            if sections_summary.get('translate'):
                summary = sections_summary['translate']
                translated_sections = (summary.get('completed', 0) + 
                                     summary.get('completed_empty', 0) + 
                                     summary.get('skipped', 0))
            score += translated_sections
            
            # EPUB
            epub_status = stages.get('epub_creation', {}).get('status')
            if epub_status in ["completed", "completed_empty", "skipped"]:
                score += 1
            
            progress_percent = (score / max_score * 100) if max_score > 0 else 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            book_title = data.get('book_title', data.get('filename', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞'))
            current_status = data.get('current_workflow_status', 'unknown')
            
            if current_status == 'completed':
                result = f"""
üìö <b>{book_title}</b>
‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: 100% ({total_sections}/{total_sections} —Å–µ–∫—Ü–∏–π)</b>

üì• <b>–°–∫–∞—á–∞—Ç—å:</b> /download {book_id}
                """.strip()
            else:
                # –î–µ—Ç–∞–ª–∏ –ø–æ —ç—Ç–∞–ø–∞–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                stage_details = []
                
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —ç—Ç–∞–ø–∞–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                for stage in stages_ordered:
                    stage_name = stage['stage_name']
                    stage_data = stages.get(stage_name, {})
                    stage_status = stage_data.get('status', 'pending')
                    is_per_section = stage.get('is_per_section', False)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∞–ø–∞
                    if stage_status in ["completed", "completed_empty", "skipped"]:
                        icon = "‚úÖ"
                        if is_per_section and sections_summary.get(stage_name):
                            summary = sections_summary[stage_name]
                            completed = (summary.get('completed', 0) + 
                                       summary.get('completed_empty', 0) + 
                                       summary.get('skipped', 0))
                            stage_details.append(f"{icon} {stage_name.title()}: {completed}/{total_sections}")
                        else:
                            stage_details.append(f"{icon} {stage_name.title()}: –∑–∞–≤–µ—Ä—à–µ–Ω")
                    elif stage_status == "processing":
                        icon = "üîÑ"
                        if is_per_section and sections_summary.get(stage_name):
                            summary = sections_summary[stage_name]
                            completed = (summary.get('completed', 0) + 
                                       summary.get('completed_empty', 0) + 
                                       summary.get('skipped', 0))
                            stage_details.append(f"{icon} {stage_name.title()}: {completed}/{total_sections}")
                        else:
                            stage_details.append(f"{icon} {stage_name.title()}: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
                    else:
                        icon = "‚è≥"
                        if is_per_section:
                            stage_details.append(f"{icon} {stage_name.title()}: –æ–∂–∏–¥–∞–µ—Ç")
                        else:
                            stage_details.append(f"{icon} {stage_name.title()}: –æ–∂–∏–¥–∞–µ—Ç")
                
                result = f"""
üìö <b>{book_title}</b>
üîÑ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {progress_percent:.1f}% ({translated_sections}/{total_sections})</b>

üìã <b>–≠—Ç–∞–ø—ã:</b>
{chr(10).join(stage_details)}
                """.strip()
            
            return result
            
        except Exception as e:
            print(f"[TelegramBot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def cmd_help(self) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        return """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

üîç <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>
/status - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
/system_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ, –ø–∞–º—è—Ç–∏, –¥–∏—Å–∫–µ

üîß <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
/test_yandex - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å Yandex API
/logs [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)

‚ö° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)

üìñ <b>–ü–µ—Ä–µ–≤–æ–¥ –∫–Ω–∏–≥:</b>
/progress [book_id] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–Ω–∏–≥–∏
/start [—Ç–æ–∫–µ–Ω] - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üìä <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –û—à–∏–±–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ Yandex API
‚Ä¢ –ò—Å—Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        """.strip()
    
    def cmd_status(self) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from config import MAIN_DB_FILE, VIDEO_DB_FILE, WORKFLOW_DB_FILE, CACHE_DIR, UPLOADS_DIR, FULL_TRANSLATION_DIR
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            status_info = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            yandex_token = "‚úÖ" if os.getenv("YANDEX_API_TOKEN") else "‚ùå"
            yandex_session = "‚úÖ" if os.getenv("YANDEX_SESSION_ID") else "‚ùå"
            openrouter_key = "‚úÖ" if os.getenv("OPENROUTER_API_KEY") else "‚ùå"
            
            status_info.append(f"Yandex API Token: {yandex_token}")
            status_info.append(f"Yandex Session ID: {yandex_session}")
            status_info.append(f"OpenRouter API Key: {openrouter_key}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_files = [
                (str(MAIN_DB_FILE), "–û—Å–Ω–æ–≤–Ω–∞—è –ë–î"),
                (str(VIDEO_DB_FILE), "–í–∏–¥–µ–æ –ë–î"),
                (str(WORKFLOW_DB_FILE), "Workflow –ë–î")
            ]
            
            for db_file, description in db_files:
                if os.path.exists(db_file):
                    size = os.path.getsize(db_file)
                    size_mb = size / (1024 * 1024)
                    status_info.append(f"{description}: ‚úÖ ({size_mb:.1f} MB)")
                else:
                    status_info.append(f"{description}: ‚ùå")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs = [str(CACHE_DIR), str(UPLOADS_DIR), str(FULL_TRANSLATION_DIR)]
            for dir_name in dirs:
                if os.path.exists(dir_name):
                    status_info.append(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}: ‚úÖ")
                else:
                    status_info.append(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}: ‚ùå")
            
            return f"""
üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

üîë <b>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:</b>
{chr(10).join(status_info[:3])}

üóÑÔ∏è <b>–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>
{chr(10).join(status_info[3:6])}

üìÅ <b>–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:</b>
{chr(10).join(status_info[6:])}
            """.strip()
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"
    
    def cmd_test_yandex(self) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /test_yandex - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç Yandex API"""
        try:
            from video_analyzer import VideoAnalyzer
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            analyzer = VideoAnalyzer()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ—Å—Ç—ã–º URL
            test_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
            
            result = analyzer.analyze_video(test_url)
            
            if result.get('error'):
                return f"""
üî¥ <b>–¢–µ—Å—Ç Yandex API - –û–®–ò–ë–ö–ê</b>

‚ùå –û—à–∏–±–∫–∞: {result['error']}

üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
                """.strip()
            else:
                return f"""
‚úÖ <b>–¢–µ—Å—Ç Yandex API - –£–°–ü–ï–•</b>

üìπ URL: {test_url}
üîó Sharing URL: {result.get('sharing_url', 'N/A')}
üìù –¢–µ–∫—Å—Ç: {len(result.get('extracted_text', ''))} —Å–∏–º–≤–æ–ª–æ–≤
ü§ñ –ê–Ω–∞–ª–∏–∑: {len(result.get('analysis', ''))} —Å–∏–º–≤–æ–ª–æ–≤

üéâ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                """.strip()
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Yandex API: {e}"
    
    def cmd_system_info(self) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /system_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            import psutil
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            memory_used = memory.used / (1024**3)  # GB
            memory_total = memory.total / (1024**3)  # GB
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
            disk = psutil.disk_usage('.')
            disk_percent = disk.percent
            disk_used = disk.used / (1024**3)  # GB
            disk_total = disk.total / (1024**3)  # GB
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
            uptime = datetime.now() - datetime.fromtimestamp(psutil.boot_time())
            uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
            
            return f"""
üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>

üñ•Ô∏è <b>CPU:</b> {cpu_percent}% ({cpu_count} —è–¥–µ—Ä)
üß† <b>–ü–∞–º—è—Ç—å:</b> {memory_percent}% ({memory_used:.1f} GB / {memory_total:.1f} GB)
üíæ <b>–î–∏—Å–∫:</b> {disk_percent}% ({disk_used:.1f} GB / {disk_total:.1f} GB)
‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime_str}

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π' if cpu_percent < 80 and memory_percent < 80 else 'üü° –ù–∞–≥—Ä—É–∑–∫–∞' if cpu_percent < 95 and memory_percent < 95 else 'üî¥ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞'}
            """.strip()
            
        except ImportError:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ psutil
            try:
                import os
                import platform
                
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
                system_info = platform.system()
                python_version = platform.python_version()
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ /proc/meminfo (Linux)
                memory_info = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                try:
                    with open('/proc/meminfo', 'r') as f:
                        mem_lines = f.readlines()
                        total_mem = 0
                        free_mem = 0
                        for line in mem_lines:
                            if line.startswith('MemTotal:'):
                                total_mem = int(line.split()[1]) / 1024  # MB
                            elif line.startswith('MemAvailable:'):
                                free_mem = int(line.split()[1]) / 1024  # MB
                        if total_mem > 0:
                            used_mem = total_mem - free_mem
                            memory_info = f"{used_mem:.0f} MB / {total_mem:.0f} MB"
                except:
                    pass
                
                return f"""
üíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ (–±–∞–∑–æ–≤–∞—è)</b>

üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b> {system_info}
üêç <b>Python:</b> {python_version}
‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}
üß† <b>–ü–∞–º—è—Ç—å:</b> {memory_info}

‚ö†Ô∏è <b>psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>
–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil
                """.strip()
                
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}"
    
    def cmd_logs(self, args: str = "") -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /logs - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            try:
                lines = int(args) if args else 10
                lines = min(lines, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 —Å—Ç—Ä–æ–∫
            except ValueError:
                lines = 10
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª–æ–≥–∏
            log_files = [
                "app.log",
                "video_analyzer.log",
                "location_finder.log"
            ]
            
            log_content = []
            for log_file in log_files:
                if os.path.exists(log_file):
                    with open(log_file, 'r', encoding='utf-8') as f:
                        file_lines = f.readlines()
                        if file_lines:
                            recent_lines = file_lines[-lines:]
                            log_content.append(f"üìÑ {log_file}:")
                            log_content.extend(recent_lines)
                            log_content.append("")
            
            if log_content:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–æ–≥–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                full_log = "".join(log_content)
                if len(full_log) > 4000:
                    full_log = full_log[:4000] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
                
                return f"""
üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ ({lines} —Å—Ç—Ä–æ–∫)</b>

{full_log}
                """.strip()
            else:
                return "‚ÑπÔ∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"
    
    def cmd_restart(self) -> str:
        """–ö–æ–º–∞–Ω–¥–∞ /restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        return """
‚ö†Ô∏è <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã</b>

üîÑ –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å (Ctrl+C)
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: python app.py

üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ systemd/PM2 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        """.strip()
    
    def process_updates(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        updates = self.get_updates()
        
        for update in updates:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            message = update.get("message", {})
            if message:
                chat_id = message.get("chat", {}).get("id")
                text = message.get("text", "")
                
                if chat_id and text:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                    if text.startswith("/"):
                        parts = text.split(" ", 1)
                        command = parts[0]
                        args = parts[1] if len(parts) > 1 else ""
                        
                        # –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        public_commands = ["/start", "/unsubscribe", "/progress"]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                        if command not in public_commands and str(chat_id) not in self.allowed_chat_ids:
                            self.send_message(chat_id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                            continue
                        
                        response = self.handle_command(chat_id, command, args)
                        if response:  # –ï—Å–ª–∏ response –Ω–µ None
                            self.send_message(chat_id, response)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–Ω–æ–ø–æ–∫
            callback_query = update.get("callback_query", {})
            if callback_query:
                chat_id = callback_query.get("message", {}).get("chat", {}).get("id")
                callback_data = callback_query.get("data", "")
                
                if chat_id and callback_data:
                    if callback_data.startswith("progress_"):
                        book_id = callback_data[9:]  # –£–±–∏—Ä–∞–µ–º "progress_"
                        response = self.cmd_progress(chat_id, book_id)
                        if response:
                            self.send_message(chat_id, response)
    
    def run_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        print("[TelegramBot] –ó–∞–ø—É—Å–∫ polling...")
        
        while True:
            try:
                self.process_updates()
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            except KeyboardInterrupt:
                print("[TelegramBot] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling...")
                break
            except Exception as e:
                print(f"[TelegramBot] –û—à–∏–±–∫–∞ –≤ polling: {e}")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_bot = TelegramBotHandler() 