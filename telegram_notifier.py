import os
import requests
import json
from typing import Optional
from datetime import datetime

class TelegramNotifier:
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")
        self.api_url = "https://api.telegram.org/bot"
        
        if not self.bot_token:
            print("[TelegramNotifier] –í–ù–ò–ú–ê–ù–ò–ï: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not self.chat_id:
            print("[TelegramNotifier] –í–ù–ò–ú–ê–ù–ò–ï: TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def send_message(self, message: str, parse_mode: str = "HTML") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.bot_token or not self.chat_id:
            print("[TelegramNotifier] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id")
            return False
        
        try:
            url = f"{self.api_url}{self.bot_token}/sendMessage"
            payload = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": parse_mode
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    print(f"[TelegramNotifier] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"[TelegramNotifier] –û—à–∏–±–∫–∞ API Telegram: {result.get('description', 'Unknown error')}")
                    return False
            else:
                print(f"[TelegramNotifier] HTTP –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            print(f"[TelegramNotifier] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def notify_yandex_token_error(self, error_type: str, details: str = "") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–∫–µ–Ω–∞ Yandex API
        
        Args:
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ (expired, invalid, etc.)
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        message = f"""
üö® <b>–û—à–∏–±–∫–∞ Yandex API Token</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> {timestamp}
‚ùå <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {error_type}

{details if details else "–¢–æ–∫–µ–Ω —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}

üîß <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –û–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """.strip()
        
        return self.send_message(message)
    
    def notify_session_expired(self, session_type: str = "Yandex Session") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
        
        Args:
            session_type: –¢–∏–ø —Å–µ—Å—Å–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        message = f"""
‚ö†Ô∏è <b>–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> {timestamp}
üîë <b>–¢–∏–ø:</b> {session_type}

üîÑ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –û–±–Ω–æ–≤–∏—Ç–µ Session_id –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """.strip()
        
        return self.send_message(message)
    
    def notify_api_error(self, api_name: str, status_code: int, error_message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ API
        
        Args:
            api_name: –ù–∞–∑–≤–∞–Ω–∏–µ API
            status_code: HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        message = f"""
üî¥ <b>–û—à–∏–±–∫–∞ API</b>

‚è∞ <b>–í—Ä–µ–º—è:</b> {timestamp}
üåê <b>API:</b> {api_name}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_code}

üí¨ <b>–û—à–∏–±–∫–∞:</b> {error_message}
        """.strip()
        
        return self.send_message(message)
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram Bot API
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        if not self.bot_token:
            print("[TelegramNotifier] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN")
            return False
        
        try:
            url = f"{self.api_url}{self.bot_token}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    bot_info = result.get("result", {})
                    print(f"[TelegramNotifier] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –ë–æ—Ç: @{bot_info.get('username', 'Unknown')}")
                    return True
                else:
                    print(f"[TelegramNotifier] ‚ùå –û—à–∏–±–∫–∞ API: {result.get('description', 'Unknown error')}")
                    return False
            else:
                print(f"[TelegramNotifier] ‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            print(f"[TelegramNotifier] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def send_message_to_user(self, user_id: str, message: str, parse_mode: str = "HTML") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML, Markdown)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.bot_token:
            print("[TelegramNotifier] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_BOT_TOKEN")
            return False
        
        try:
            url = f"{self.api_url}{self.bot_token}/sendMessage"
            payload = {
                "chat_id": user_id,
                "text": message,
                "parse_mode": parse_mode
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    print(f"[TelegramNotifier] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    return True
                else:
                    print(f"[TelegramNotifier] –û—à–∏–±–∫–∞ API Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result.get('description', 'Unknown error')}")
                    return False
            else:
                print(f"[TelegramNotifier] HTTP –æ—à–∏–±–∫–∞ {response.status_code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.text}")
                return False
                
        except Exception as e:
            print(f"[TelegramNotifier] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
telegram_notifier = TelegramNotifier() 